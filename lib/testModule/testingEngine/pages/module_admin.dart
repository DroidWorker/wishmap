import 'package:fluro/fluro.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:wishmap/res/colors.dart';
import 'package:wishmap/testModule/testingEngine/pages/report1.dart';
import '../../router.dart';
import '../../toolWidgets/EmojiText.dart';
import '../../toolWidgets/indexes_edit_table.dart';
import '../../toolWidgets/wavwChart.dart';
import '../../toolWidgets/wind_rose.dart';
import '../../tools/tools.dart';
import '../ViewModel.dart';
import '../data/models.dart';

class ModuleAdmin extends StatefulWidget {
  const ModuleAdmin({super.key});

  ModuleAdminState createState() => ModuleAdminState();
}

class ModuleAdminState extends State{
  late TestViewModel vm;
  bool isVideoVisible = true;
  List<Question> questions = [];
  var step = 1;
  var maxStep = 21;

  List<double> ansvers = [];

  Map<String, double> wawefuncAnswer = {
  "–°—Ç—ã–¥/–ü–æ–∑–æ—Ä":0,
  "–í–∏–Ω–∞":0,
  "–ê–ø–∞—Ç–∏—è":0,
  "–ì–æ—Ä–µ":0,
  "–°—Ç—Ä–∞—Ö":0,
  "–í–æ–∂–¥–µ–ª–µ–Ω–∏–µ":0,
  "–ì–Ω–µ–≤":0,
  "–ì–æ—Ä–¥–æ—Å—Ç—å":0,
  "–°–º–µ–ª–æ—Å—Ç—å":0,
  "–ù–µ–π—Ç—Ä–∞–ª–∏—Ç–µ—Ç":0,
  "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å":0,
  "–ü—Ä–∏–Ω—è—Ç–∏–µ":0,
 "–†–∞–∑—É–º–Ω–æ—Å—Ç—å":0,
  "–õ—é–±–æ–≤—å":0,
  "–†–∞–¥–æ—Å—Ç—å":0,
  "–ü–æ–∫–æ–π":0
  };

  List<String> spheres = [
  "–ó–¥–æ—Ä–æ–≤—å–µ",
  "–û—Ç–Ω–æ—à–µ–Ω–∏—è",
  "–û–∫—Ä—É–∂–µ–Ω–∏–µ",
  "–ü—Ä–∏–∑–≤–∞–Ω–∏–µ",
  "–ë–æ–≥–∞—Ç—Å—Ç–≤–æ",
  "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ",
  "–Ø—Ä–∫–æ—Å—Ç—å –∂–∏–∑–Ω–∏",
  "–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å"
  ];

  Map<String, double> hokkingSumm =  {
    "–°—Ç—ã–¥/–ü–æ–∑–æ—Ä":0,
    "–í–∏–Ω–∞":0,
    "–ê–ø–∞—Ç–∏—è":0,
    "–ì–æ—Ä–µ":0,
    "–°—Ç—Ä–∞—Ö":0,
    "–í–æ–∂–¥–µ–ª–µ–Ω–∏–µ":0,
    "–ì–Ω–µ–≤":0,
    "–ì–æ—Ä–¥–æ—Å—Ç—å":0,
    "–°–º–µ–ª–æ—Å—Ç—å":0,
    "–ù–µ–π—Ç—Ä–∞–ª–∏—Ç–µ—Ç":0,
    "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å":0,
    "–ü—Ä–∏–Ω—è—Ç–∏–µ":0,
    "–†–∞–∑—É–º–Ω–æ—Å—Ç—å":0,
    "–õ—é–±–æ–≤—å":0,
    "–†–∞–¥–æ—Å—Ç—å":0,
    "–ü–æ–∫–æ–π":0
  };

  @override
  void initState() {
    super.initState();
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ViewModel
    vm = Provider.of<TestViewModel>(context, listen: false);

    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –≤–æ ViewModel —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    vm.getmoduleName();
    vm.getQuestions();
  }

  int toggledButton = -1;

  List<Question> currentResults = [];
  List<Question> totalResults = [];
  List<double> ressumm = [0,0,0,0,0,0,0,0];

  double expectation = 0;
  List<double> exps = const [0.20,0.30,0.50,0.75,1.00,1.25,1.50,1.75,2.00,2.50,3.10,3.50,4.00,5.00,5.40,6.00];
  int expectationLocation = 0;

  TextEditingController tc1 = TextEditingController()..text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∏–Ω–µ–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç";
  TextEditingController tc2 = TextEditingController()..text="–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–Ω–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–ª–æ–∂–Ω—ã–π –∫–∏–Ω–µ–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º—ã—à–µ—á–Ω—ã–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ –ª–æ–∂–Ω–æ—Å—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º—ã—à–µ—á–Ω–æ–≥–æ —Ç–æ–Ω—É—Å–∞. –ú—ã—à—Ü—ã —Ç–µ–ª–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Å–ª–∞–±–µ–≤–∞—é—Ç –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ò—Å—Ç–∏–Ω—ã –∏–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å–∏–ª—å–Ω—ã–º–∏ –≤ –µ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏.\n\n–ì–ª—É–±–æ–∫–æ –ø–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ —á—É–≤—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏—Å–ø—Ç—ã–≤–∞–µ—Ç–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è —Å–µ–±–µ —Å–≤–æ–∏ –ª—é–±–æ–≤–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º.\n\n–ï—Å–ª–∏ –º—ã—à—Ü—ã –≤–∞—à–∏—Ö –ø–∞–ª–µ—Ü –∏ —Ä—É–∫ –æ—Å–ª–∞–±–µ–≤–∞—é—Ç –∏ –∫–æ–ª—å—Ü–∞ —Ä–∞–∑–∂–∏–º–∞—é—Ç—Å—è —Å–∞–º–∏ —Å–æ–±–æ–π, –∑–Ω–∞—á–∏—Ç –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Å–ª–∞–±–æ—Å—Ç—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –≤–∞–º —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è. –ù–∞–ø—Ä–æ—Ç–∏–≤, –µ—Å–ª–∏ –º—ã—à—Ü—ã –≤ —Ç–æ–Ω—É—Å–µ, –∏ –ª–µ–≥–∫–æ —É–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∫–æ–ª—å—Ü–∞ —Å–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏, —Ç–æ –≤—ã —á—É—Å—Ç–≤—É–µ—Ç–µ —Å–∏–ª—É, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –æ–Ω–∏ –Ω–µ –≤–≤–æ–¥—è—Ç  –≤–∞—Å –≤ —Ç—Ä–µ–≤–æ–≥—É –∏ —Å—Ç—Ä–∞—Ö, –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–µ–±–µ, –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–Ω—è—Ç–æ.";

  @override
  Widget build(BuildContext context) {
    expectation=calculateExpectation(hokkingSumm.values.toList(), exps);
    double minDifference = 0;
    for (int i = 0; i < 16; i++) {
      double difference = (exps[i]*100 - expectation*10.0).abs();
      if (difference < minDifference) {
        minDifference = difference;
        expectationLocation = i;
      }
    }

    return Consumer<TestViewModel>(builder: (context, viewModel, child){
      questions= viewModel.questionsAndKoeffs;
      if(questions.isNotEmpty) {
        maxStep = questions.length;
        currentResults.clear();
        totalResults.clear();
        for(int i=0; i<8; i++){
          currentResults.add(Question(question: spheres[i], answers: [], indexes: [questions[step-1].indexes[i], (ansvers.length==step)?ansvers[step-1]:-1, (ansvers.length==step)?ansvers[step-1]*questions[step-1].indexes[i]:-1]));
          totalResults.add(Question(question: spheres[i], answers: [], indexes: [questions[step-1].indexes[i], (ansvers.length==step)?ansvers[step-1]:-1, (ansvers.length==step)?ressumm[i]+(ansvers[step-1]*questions[step-1].indexes[i]):-1]));
        }
        if(ansvers.length==step) {
          int i =0;
          final hokins = viewModel.getHokinsForQuestion(step-1);
          wawefuncAnswer.forEach((key, value) {
          switch(ansvers.last){
            case 1:
              wawefuncAnswer[key]=hokins[0][i]/100.toDouble();
            case 0.75:
              wawefuncAnswer[key]=hokins[1][i]/100.toDouble();
            case 0.5:
              wawefuncAnswer[key]=hokins[2][i]/100.toDouble();
            case 0.25:
              wawefuncAnswer[key]=hokins[3][i]/100.toDouble();
            case 0:
              wawefuncAnswer[key]=hokins[4][i]/100.toDouble();
          }
          i++;
        });
        }
      }
        return Scaffold(
            appBar: AppBar(
                backgroundColor: appbarColor,
                scrolledUnderElevation: 0,
                toolbarHeight: 90,
                title: Center(
                  child: Image.asset(
                    'assets/res/images/logo.png',
                    height: 90,
                  ),
                )
            ),
            body: LayoutBuilder(
                builder: (context, constraints) {
                  return SingleChildScrollView(
                      child: Column(children:[Container(
                          width: constraints.maxWidth,
                          color: bgMainColor,
                          padding: constraints.maxWidth>600? const EdgeInsets.all(100.0): const EdgeInsets.all(20.0),
                          child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Center(child: Text(viewModel.moduleName, style: const TextStyle(fontSize: 20),),),
                                step>9?const SizedBox(height: 40,):Container(),
                                (step>9&&step<21)? Center(child: EmojiText(text: '–•–æ—Ä–æ—à–æ –∏–¥–µ–º üëç 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∑–∞–¥–∏', style: const TextStyle(fontSize: 18),)): step>19? Center(child: EmojiText(text: '–û—Ç–ª–∏—á–Ω–æ üôÇ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∑–∞–¥–∏', style: const TextStyle(fontSize: 18),),):Container(),
                                const SizedBox(height: 40,),
                                Row(children: [
                                  if(constraints.maxWidth>600)TextButton(onPressed: (){

                                  },
                                    style: ButtonStyle(
                                      shape: MaterialStateProperty.all<RoundedRectangleBorder>(
                                        const RoundedRectangleBorder(
                                          borderRadius: BorderRadius.only(
                                            topLeft: Radius.circular(20.0),
                                            bottomLeft: Radius.circular(20.0),
                                          ),
                                        ),
                                      ),
                                      backgroundColor: MaterialStateProperty.all<Color>(progressColor),
                                    ),
                                    child: const Text(
                                      '–Ω–∞–∑–∞–¥',
                                      style: TextStyle(
                                        color: Colors.black,
                                        fontSize: 16.0,
                                      ),
                                    ),),
                                  if(constraints.maxWidth>600)const SizedBox(width: 30,),
                                  Expanded(child:SizedBox(height: 32,
                                      child:
                                      ClipRRect(
                                          borderRadius: const BorderRadius.only(
                                            topRight: Radius.circular(20.0),
                                            bottomRight: Radius.circular(20.0),
                                          ),
                                          child:Stack(
                                            children: [
                                              Positioned.fill(
                                                child: LinearProgressIndicator(
                                                  minHeight: 10,
                                                  value: (step)/21, // –ü—Ä–∏–º–µ—Ä: 0.5 –æ–∑–Ω–∞—á–∞–µ—Ç 50% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                                                  backgroundColor: buttonGrey, // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≥—Ä–∞–Ω–∏—Ü
                                                  valueColor: AlwaysStoppedAnimation<Color>(progressColor),
                                                ),
                                              ),
                                              Align(
                                                alignment: Alignment.centerLeft,
                                                child: Text(
                                                  '   –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ $step –∏–∑ $maxStep (${(step*100)~/maxStep}%)', // –¢–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ progress bar
                                                  style: const TextStyle(
                                                    color: Colors.black,
                                                    fontSize: 16.0,
                                                  ),
                                                ),
                                              ),
                                            ],
                                          ))))
                                ],),
                                const SizedBox(height:30,),
                                const Text('–û—Ü–µ–Ω–∏—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∏–∂–µ', textAlign: TextAlign.left,),
                                const SizedBox(height: 20,),
                                Text(questions.isNotEmpty?questions[step-1].question:"", style: const TextStyle(fontSize: 22),),
                                const SizedBox(height: 30,),
                                Row(children: [
                                  Expanded(child:Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      TextButton(
                                        style: TextButton.styleFrom(
                                          minimumSize: const Size(300.0, 60.0),
                                          backgroundColor: toggledButton==0?Colors.yellow:buttonGrey,
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(15.0), // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ 0.0, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                                          ),
                                        ),
                                        onPressed: () {
                                          setState(() {
                                            toggledButton=0;
                                            ansvers.length==step?ansvers[step-1]=1:ansvers.add(1);
                                          });
                                        },
                                        child: Text(
                                          questions.isNotEmpty?questions[step-1].answers[0]:'–°–æ–≥–ª–∞—Å–µ–Ω',
                                          style: TextStyle(fontSize: 20.0, color: Colors.black),
                                        ),
                                      ),
                                      const SizedBox(height: 30,),
                                      TextButton(
                                        style: TextButton.styleFrom(
                                          minimumSize: const Size(300.0, 60.0),
                                          backgroundColor: toggledButton==1?Colors.yellow:buttonGrey,
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(15.0), // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ 0.0, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                                          ),
                                        ),
                                        onPressed: () {
                                          setState(() {
                                            toggledButton=1;
                                            ansvers.length==step?ansvers[step-1]=0.75:ansvers.add(0.75);
                                          });
                                        },
                                        child:  Text(
                                          questions.isNotEmpty?questions[step-1].answers[1]:'–°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω',
                                          style: TextStyle(fontSize: 18.0, color: Colors.black),
                                        ),
                                      ),
                                      const SizedBox(height: 30,),
                                      TextButton(
                                        style: TextButton.styleFrom(
                                          minimumSize: const Size(300.0, 60.0),
                                          backgroundColor: toggledButton==2?Colors.yellow:buttonGrey,
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(15.0), // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ 0.0, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                                          ),
                                        ),
                                        onPressed: () {
                                          setState(() {
                                            toggledButton=2;
                                            ansvers.length==step?ansvers[step-1]=0.5:ansvers.add(0.5);
                                          });
                                        },
                                        child: Text(
                                          questions.isNotEmpty?questions[step-1].answers[2]:'–ù–µ—á—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ',
                                          style: TextStyle(fontSize: 18.0, color: Colors.black),
                                        ),
                                      ),
                                      const SizedBox(height: 30,),
                                      TextButton(
                                        style: TextButton.styleFrom(
                                          minimumSize: const Size(300.0, 60.0),
                                          backgroundColor: toggledButton==3?Colors.yellow:buttonGrey,
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(15.0), // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ 0.0, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                                          ),
                                        ),
                                        onPressed: () {
                                          setState(() {
                                            toggledButton=3;
                                            ansvers.length==step?ansvers[step-1]=0.25:ansvers.add(0.25);
                                          });
                                        },
                                        child: Text(
                                          questions.isNotEmpty?questions[step-1].answers[3]:'–°–∫–æ—Ä–µ–µ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω',
                                          style: const TextStyle(fontSize: 18.0, color: Colors.black),
                                        ),
                                      ),
                                      const SizedBox(height: 30,),
                                      TextButton(
                                        style: TextButton.styleFrom(
                                          minimumSize: const Size(300.0, 60.0),
                                          backgroundColor: toggledButton==4?Colors.yellow:buttonGrey,
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(15.0), // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ 0.0, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                                          ),
                                        ),
                                        onPressed: () {
                                          setState(() {
                                            toggledButton=4;
                                            ansvers.length==step?ansvers[step-1]=0:ansvers.add(0);
                                          });
                                        },
                                        child: Text(
                                          questions.isNotEmpty?questions[step-1].answers[4]:'–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω',
                                          style: const TextStyle(fontSize: 20.0, color: Colors.black),
                                        ),
                                      ),
                                      const SizedBox(height: 30,),
                                    ],)),
                                  if(constraints.maxWidth>600)Expanded(child:Column(children: [
                                    TextField(controller: tc1, maxLines: 2, style: const TextStyle(fontSize: 19, fontWeight: FontWeight.bold, decoration: TextDecoration.underline)),
                                    TextField(controller: tc2, maxLines: 20, style: const TextStyle(fontWeight: FontWeight.normal, decoration: TextDecoration.none))
                                  ],))
                                ],),
                                const SizedBox(height: 80,),
                                Row(children: [
                                  TextButton(
                                    onPressed: () {
                                      viewModel.ansversM1=ansvers;
                                      for(int i=0; i<8; i++) {
                                        ressumm[i]+=(ansvers[step-1]*questions[step-1].indexes[i]);
                                      }
                                      wawefuncAnswer.forEach((key, value) {
                                        if(hokkingSumm.containsKey(key))hokkingSumm[key] = hokkingSumm[key]!+(wawefuncAnswer[key]??0);
                                      });
                                      setState(() {
                                        if(step!=maxStep) {
                                          step++;
                                        } else{
                                          viewModel.calculateResult();
                                          Navigator.push(
                                            context,
                                            MaterialPageRoute(builder: (context) => Report1()),
                                          );
                                        }
                                      });
                                    },
                                    child: Text(
                                      '–î–∞–ª–µ–µ',
                                      style: TextStyle(fontSize: constraints.maxWidth>600?20.0:14, color: Colors.black),
                                      textAlign: TextAlign.center,
                                    ),
                                    style: TextButton.styleFrom(
                                      backgroundColor: buttonGrey,
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(15.0), // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ 0.0, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                                      ),
                                    ),
                                  ),
                                  const SizedBox(width: 10,),
                                  TextButton(
                                    onPressed: () {
                                      AppRouter.router.navigateTo(context, '/setting', transition: TransitionType.inFromRight);
                                    },
                                    child: Text(
                                      '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                                      style: TextStyle(fontSize: constraints.maxWidth>600?20.0:14, color: Colors.black),
                                      textAlign: TextAlign.center,
                                    ),
                                    style: TextButton.styleFrom(
                                      backgroundColor: buttonGrey,
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(15.0), // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ 0.0, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                                      ),
                                    ),
                                  ),
                                  const Spacer(),
                                  TextButton(
                                    onPressed: () {

                                    },
                                    child: Text(
                                      '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                                      style: TextStyle(fontSize: constraints.maxWidth>600?20.0:14, color: Colors.black),
                                      textAlign: TextAlign.center,
                                    ),
                                    style: TextButton.styleFrom(
                                      backgroundColor: buttonGrey,
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(15.0), // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ 0.0, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                                      ),
                                    ),
                                  ),
                                ],),
                                const Text("–ö–æ–ª–µ—Å–æ –±–∞–ª–∞–Ω—Å–∞", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),),
                                const Text("–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"),
                                const SizedBox(height: 10,),
                                EditableTable(maxWidth:  MediaQuery.of(context).size.width, questions: currentResults, indexTitle: const ["–í–µ—Å –≤–æ–ø—Ä–æ—Å–∞", "–í–µ—Å –æ—Ç–≤–µ—Ç–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"], onValueUpdate: (value){},),
                                const SizedBox(height: 15),
                                const Text("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º –∏—Ç–æ–≥–æ–º"),
                                const SizedBox(height: 10),
                                EditableTable(maxWidth:  MediaQuery.of(context).size.width, questions: totalResults, indexTitle: const ["–í–µ—Å –≤–æ–ø—Ä–æ—Å–∞", "–í–µ—Å –æ—Ç–≤–µ—Ç–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"], onValueUpdate: (value){},),
                                const SizedBox(height: 55,),
                                const Center(child: Text("–î–∏–∞–≥—Ä–∞–º–º–∞ –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º –∏—Ç–æ–≥–æ–º"),),
                                const SizedBox(height: 55,),
                                Center(child:WindRose(
                                  values: ressumm.indexed.map((e) => ((ansvers.length==step)?ressumm[e.$1]+(ansvers[step-1]*questions[step-1].indexes[e.$1]):0)*1.0).toList()
                                )),
                                const SizedBox(height: 45,),
                                const Center(child: Text("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –•–æ–∫–∏–Ω—Å—É")),
                                Row(children: [
                                  const SizedBox(width: 100, child:const Text("–ú–∞—Ç.–æ–∂–∏–¥–∞–Ω–∏–µ")),
                                  Container(
                                    decoration: BoxDecoration(
                                        border: Border.all(color: Colors.black)
                                    ),
                                    child: Text(expectation.toString()),
                                  )
                                ],),
                                Row(children: [
                                  const SizedBox(width: 100, child:Text("–°–æ—Å—Ç–æ—è–Ω–∏–µ")),
                                  Container(
                                    decoration: BoxDecoration(
                                        border: Border.all(color: Colors.black)
                                    ),
                                    child: Text(expectationLocation.toString()),
                                  )
                                ],),
                                Row(children: [
                                  const SizedBox(width: 100, child:Text("–ò–Ω–¥–µ–∫—Å")),
                                  Container(
                                    decoration: BoxDecoration(
                                        border: Border.all(color: Colors.black)
                                    ),
                                    child: Text("none"),
                                  ),
                                ],),
                                  const SizedBox(height: 55,),
                                  const Text("–í–æ–ª–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"),
                                  CustomLineChart(data: wawefuncAnswer, expectations: const [0.20,0.30,0.50,0.75,1.00,1.25,1.50,1.75,2.00,2.50,3.10,3.50,4.00,5.00,5.40,6.00]),
                                const SizedBox(height: 55,),
                                const Text("–í–æ–ª–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º –∏—Ç–æ–≥–æ–º (–•–æ–∫–∏–Ω—Å)"),
                                CustomLineChart(data: hokkingSumm, expectations: const [0.20,0.30,0.50,0.75,1.00,1.25,1.50,1.75,2.00,2.50,3.10,3.50,4.00,5.00,5.40,6.00]),

                              ])),
                        Container(
                          height: 100,
                          color: footerColor,
                        )
                      ])
                  );
                })
        );
    }
    );
  }
}