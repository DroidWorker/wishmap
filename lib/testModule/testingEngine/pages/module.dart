import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import 'package:wishmap/res/colors.dart';
import 'package:wishmap/testModule/testingEngine/pages/report1.dart';

import '../../toolWidgets/EmojiText.dart';
import '../../toolWidgets/video_player.dart';
import '../ViewModel.dart';
import '../data/models.dart';

class Module1 extends StatefulWidget {
  const Module1({super.key});

  Module1State createState() => Module1State();
}

class Module1State extends State{
  late TestViewModel vm;
  bool isVideoVisible = true;
  List<Question> questions = [];
  var step = 1;
  var maxStep = 21;

  @override
  void initState() {
    super.initState();
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ViewModel
    vm = Provider.of<TestViewModel>(context, listen: false);

    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –≤–æ ViewModel —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    vm.getmoduleName();
    vm.getQuestions();
  }

  @override
  Widget build(BuildContext context) {
    return Consumer<TestViewModel>(builder: (context, viewModel, child){
      questions= viewModel.questionsAndKoeffs;
      if(questions.isNotEmpty)maxStep=questions.length;

      return Scaffold(
        appBar: AppBar(
            backgroundColor: appbarColor,
            scrolledUnderElevation: 0,
            toolbarHeight: 90,
            title: Center(
              child: Image.asset(
                'assets/res/images/logo.png',
                height: 90,
              ),
            )
        ),
        body: LayoutBuilder(
            builder: (context, constraints) {
              return SingleChildScrollView(
                  child: Column(children:[Container(
                      width: constraints.maxWidth,
                      color: bgMainColor,
                      padding: constraints.maxWidth>600? const EdgeInsets.all(100.0): const EdgeInsets.all(20.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Center(child: Text(viewModel.moduleName, style: const TextStyle(fontSize: 20),),),
                                step>9?const SizedBox(height: 40,):Container(),
                                (step>9&&step<21)? Center(child: EmojiText(text: '–•–æ—Ä–æ—à–æ –∏–¥–µ–º üëç 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∑–∞–¥–∏', style: const TextStyle(fontSize: 18),)): step>19? Center(child: EmojiText(text: '–û—Ç–ª–∏—á–Ω–æ üôÇ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∑–∞–¥–∏', style: const TextStyle(fontSize: 18),),):Container(),
                                const SizedBox(height: 40,),
                                Row(children: [
                                  if(constraints.maxWidth>600)TextButton(onPressed: (){

                                  },
                                    style: ButtonStyle(
                                      shape: MaterialStateProperty.all<RoundedRectangleBorder>(
                                        const RoundedRectangleBorder(
                                          borderRadius: BorderRadius.only(
                                            topLeft: Radius.circular(20.0),
                                            bottomLeft: Radius.circular(20.0),
                                          ),
                                        ),
                                      ),
                                      backgroundColor: MaterialStateProperty.all<Color>(progressColor),
                                    ),
                                    child: const Text(
                                      '–Ω–∞–∑–∞–¥',
                                      style: TextStyle(
                                        color: Colors.black,
                                        fontSize: 16.0,
                                      ),
                                    ),),
                                  if(constraints.maxWidth>600)const SizedBox(width: 30,),
                                  Expanded(child:SizedBox(height: 32,
                                      child:
                                  ClipRRect(
                                      borderRadius: const BorderRadius.only(
                                        topRight: Radius.circular(20.0),
                                        bottomRight: Radius.circular(20.0),
                                      ),
                                      child:Stack(
                                        children: [
                                          Positioned.fill(
                                            child: LinearProgressIndicator(
                                              minHeight: 10,
                                              value: (step)/questions.length, // –ü—Ä–∏–º–µ—Ä: 0.5 –æ–∑–Ω–∞—á–∞–µ—Ç 50% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                                              backgroundColor: buttonGrey, // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≥—Ä–∞–Ω–∏—Ü
                                              valueColor: AlwaysStoppedAnimation<Color>(progressColor),
                                            ),
                                          ),
                                           Align(
                                            alignment: Alignment.centerLeft,
                                            child: Text(
                                              '   –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ $step –∏–∑ $maxStep (${(step*100)~/maxStep}%)', // –¢–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ progress bar
                                              style: const TextStyle(
                                                color: Colors.black,
                                                fontSize: 16.0,
                                              ),
                                            ),
                                          ),
                                        ],
                                      ))))
                                ],),
                                const SizedBox(height:30,),
                                const Text('–û—Ü–µ–Ω–∏—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∏–∂–µ', textAlign: TextAlign.left,),
                                const SizedBox(height: 20,),
                                Text(questions.isNotEmpty?questions[step-1].question:"", style: const TextStyle(fontSize: 22),),
                                const SizedBox(height: 30,),
                                Row(children: [
                                  Expanded(child:Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                    TextButton(
                                      style: TextButton.styleFrom(
                                        minimumSize: const Size(300.0, 60.0),
                                        backgroundColor: buttonGrey,
                                        shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.circular(15.0), // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ 0.0, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                                        ),
                                      ),
                                      onPressed: () {
                                        setState(() {
                                          viewModel.ansversM1.add(1);
                                          if(step!=maxStep) {
                                            step++;
                                          } else{
                                            print(";;;;;;;;;;");
                                            viewModel.calculateResult();
                                            Navigator.push(
                                              context,
                                              MaterialPageRoute(builder: (context) => Report1()),
                                            );
                                          }
                                        });
                                      },
                                      child: Text(
                                        questions.isNotEmpty?questions[step-1].answers[0]:'–°–æ–≥–ª–∞—Å–µ–Ω',
                                        style: TextStyle(fontSize: 20.0, color: Colors.black),
                                      ),
                                    ),
                                    const SizedBox(height: 30,),
                                    TextButton(
                                      style: TextButton.styleFrom(
                                        minimumSize: const Size(300.0, 60.0),
                                        backgroundColor: buttonGrey,
                                        shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.circular(15.0), // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ 0.0, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                                        ),
                                      ),
                                      onPressed: () {
                                        setState(() {
                                          viewModel.ansversM1.add(0.75);
                                          if(step!=maxStep) {
                                            step++;
                                          } else{
                                            viewModel.calculateResult();
                                            Navigator.push(
                                              context,
                                              MaterialPageRoute(builder: (context) => Report1()),
                                            );
                                          }
                                        });
                                      },
                                      child:  Text(
                                        questions.isNotEmpty?questions[step-1].answers[1]:'–°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω',
                                        style: TextStyle(fontSize: 18.0, color: Colors.black),
                                      ),
                                    ),
                                    const SizedBox(height: 30,),
                                    TextButton(
                                      style: TextButton.styleFrom(
                                        minimumSize: const Size(300.0, 60.0),
                                        backgroundColor: buttonGrey,
                                        shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.circular(15.0), // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ 0.0, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                                        ),
                                      ),
                                      onPressed: () {
                                        setState(() {
                                          viewModel.ansversM1.add(0.5);
                                          if(step!=maxStep) {
                                            step++;
                                          } else{
                                            viewModel.calculateResult();
                                            Navigator.push(
                                              context,
                                              MaterialPageRoute(builder: (context) => Report1()),
                                            );
                                          }
                                        });
                                      },
                                      child: Text(
                                        questions.isNotEmpty?questions[step-1].answers[2]:'–ù–µ—á—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ',
                                        style: TextStyle(fontSize: 18.0, color: Colors.black),
                                      ),
                                    ),
                                    const SizedBox(height: 30,),
                                    TextButton(
                                      style: TextButton.styleFrom(
                                        minimumSize: const Size(300.0, 60.0),
                                        backgroundColor: buttonGrey,
                                        shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.circular(15.0), // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ 0.0, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                                        ),
                                      ),
                                      onPressed: () {
                                        setState(() {
                                          viewModel.ansversM1.add(0.25);
                                          if(step!=maxStep) {
                                            step++;
                                          } else{
                                            viewModel.calculateResult();
                                            Navigator.push(
                                              context,
                                              MaterialPageRoute(builder: (context) => Report1()),
                                            );
                                          }
                                        });
                                      },
                                      child: Text(
                                        questions.isNotEmpty?questions[step-1].answers[3]:'–°–∫–æ—Ä–µ–µ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω',
                                        style: const TextStyle(fontSize: 18.0, color: Colors.black),
                                      ),
                                    ),
                                    const SizedBox(height: 30,),
                                    TextButton(
                                      style: TextButton.styleFrom(
                                        minimumSize: const Size(300.0, 60.0),
                                        backgroundColor: buttonGrey,
                                        shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.circular(15.0), // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ 0.0, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                                        ),
                                      ),
                                      onPressed: () {
                                        setState(() {
                                          viewModel.ansversM1.add(0);
                                          if(step!=maxStep) {
                                            step++;
                                          } else{
                                            viewModel.calculateResult();
                                            Navigator.push(
                                              context,
                                              MaterialPageRoute(builder: (context) => Report1()),
                                            );
                                          }
                                        });
                                      },
                                      child: Text(
                                        questions.isNotEmpty?questions[step-1].answers[4]:'–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω',
                                        style: const TextStyle(fontSize: 20.0, color: Colors.black),
                                      ),
                                    ),
                                    const SizedBox(height: 30,),
                                  ],)),
                                  if(constraints.maxWidth>600)Expanded(child:RichText(text: const TextSpan(text: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∏–Ω–µ–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç\n\n', style: TextStyle(fontSize: 19, fontWeight: FontWeight.bold, decoration: TextDecoration.underline),
                                  children:[TextSpan(text: '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–Ω–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–ª–æ–∂–Ω—ã–π –∫–∏–Ω–µ–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º—ã—à–µ—á–Ω—ã–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ –ª–æ–∂–Ω–æ—Å—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º—ã—à–µ—á–Ω–æ–≥–æ —Ç–æ–Ω—É—Å–∞. –ú—ã—à—Ü—ã —Ç–µ–ª–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Å–ª–∞–±–µ–≤–∞—é—Ç –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ò—Å—Ç–∏–Ω—ã –∏–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å–∏–ª—å–Ω—ã–º–∏ –≤ –µ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏.\n\n–ì–ª—É–±–æ–∫–æ –ø–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ —á—É–≤—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏—Å–ø—Ç—ã–≤–∞–µ—Ç–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è —Å–µ–±–µ —Å–≤–æ–∏ –ª—é–±–æ–≤–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º.\n\n–ï—Å–ª–∏ –º—ã—à—Ü—ã –≤–∞—à–∏—Ö –ø–∞–ª–µ—Ü –∏ —Ä—É–∫ –æ—Å–ª–∞–±–µ–≤–∞—é—Ç –∏ –∫–æ–ª—å—Ü–∞ —Ä–∞–∑–∂–∏–º–∞—é—Ç—Å—è —Å–∞–º–∏ —Å–æ–±–æ–π, –∑–Ω–∞—á–∏—Ç –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Å–ª–∞–±–æ—Å—Ç—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –≤–∞–º —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è. –ù–∞–ø—Ä–æ—Ç–∏–≤, –µ—Å–ª–∏ –º—ã—à—Ü—ã –≤ —Ç–æ–Ω—É—Å–µ, –∏ –ª–µ–≥–∫–æ —É–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∫–æ–ª—å—Ü–∞ —Å–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏, —Ç–æ –≤—ã —á—É—Å—Ç–≤—É–µ—Ç–µ —Å–∏–ª—É, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –æ–Ω–∏ –Ω–µ –≤–≤–æ–¥—è—Ç  –≤–∞—Å –≤ —Ç—Ä–µ–≤–æ–≥—É –∏ —Å—Ç—Ä–∞—Ö, –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–µ–±–µ, –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–Ω—è—Ç–æ.', style: TextStyle(fontWeight: FontWeight.normal, decoration: TextDecoration.none))]))),
                                ],),
                                const SizedBox(height: 80,),
                                if(constraints.maxWidth<=600)RichText(text: const TextSpan(text: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∏–Ω–µ–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç\n\n', style: TextStyle(fontSize: 19, fontWeight: FontWeight.bold, decoration: TextDecoration.underline),
                                    children:[TextSpan(text: '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–Ω–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–ª–æ–∂–Ω—ã–π –∫–∏–Ω–µ–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º—ã—à–µ—á–Ω—ã–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ –ª–æ–∂–Ω–æ—Å—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º—ã—à–µ—á–Ω–æ–≥–æ —Ç–æ–Ω—É—Å–∞. –ú—ã—à—Ü—ã —Ç–µ–ª–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Å–ª–∞–±–µ–≤–∞—é—Ç –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ò—Å—Ç–∏–Ω—ã –∏–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å–∏–ª—å–Ω—ã–º–∏ –≤ –µ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏.\n\n–ì–ª—É–±–æ–∫–æ –ø–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ —á—É–≤—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏—Å–ø—Ç—ã–≤–∞–µ—Ç–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è —Å–µ–±–µ —Å–≤–æ–∏ –ª—é–±–æ–≤–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º.\n\n–ï—Å–ª–∏ –º—ã—à—Ü—ã –≤–∞—à–∏—Ö –ø–∞–ª–µ—Ü –∏ —Ä—É–∫ –æ—Å–ª–∞–±–µ–≤–∞—é—Ç –∏ –∫–æ–ª—å—Ü–∞ —Ä–∞–∑–∂–∏–º–∞—é—Ç—Å—è —Å–∞–º–∏ —Å–æ–±–æ–π, –∑–Ω–∞—á–∏—Ç –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Å–ª–∞–±–æ—Å—Ç—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –≤–∞–º —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è. –ù–∞–ø—Ä–æ—Ç–∏–≤, –µ—Å–ª–∏ –º—ã—à—Ü—ã –≤ —Ç–æ–Ω—É—Å–µ, –∏ –ª–µ–≥–∫–æ —É–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∫–æ–ª—å—Ü–∞ —Å–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏, —Ç–æ –≤—ã —á—É—Å—Ç–≤—É–µ—Ç–µ —Å–∏–ª—É, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –æ–Ω–∏ –Ω–µ –≤–≤–æ–¥—è—Ç  –≤–∞—Å –≤ —Ç—Ä–µ–≤–æ–≥—É –∏ —Å—Ç—Ä–∞—Ö, –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–µ–±–µ, –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–Ω—è—Ç–æ.', style: TextStyle(fontWeight: FontWeight.normal, decoration: TextDecoration.none))])),
                                if(constraints.maxWidth<=600)const SizedBox(height: 20,),
                                isVideoVisible? const Center(child: Text('–ö–∏–Ω–µ–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç', style: TextStyle(fontWeight: FontWeight.bold, fontSize: 19),)):Container(),
                                isVideoVisible? const VideoPlayerScreen(videoUrl: "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"):Container(),
                                const SizedBox(height: 80,),
                                const Text("–í–ø–µ—Ä–µ–¥–∏ —Ç–µ–±—è –∂–¥—É—Ç –º–æ–¥—É–ª–∏:", style: TextStyle(fontSize: 18),),
                                const SizedBox(height: 60,),
                                RichText(text: const TextSpan(text: "1. –°—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏\n",style: TextStyle(fontWeight: FontWeight.bold),
                                children: [
                                  TextSpan(text: "2. –®–∫–∞–ª–∞ —ç–º–æ—Ü–∏–π\n",style: TextStyle(fontWeight: FontWeight.bold)),
                                  TextSpan(text: "3. –ö–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏\n",style: TextStyle(fontWeight: FontWeight.bold)),
                                  TextSpan(text: "4. –û—Ü–µ–Ω–∫–∞ –Ø\n",style: TextStyle(fontWeight: FontWeight.bold)),
                                  TextSpan(text: "5. –°–º–µ—Ä—Ç–Ω—ã–µ –≥—Ä–µ—Ö–∏",style: TextStyle(fontWeight: FontWeight.bold)),
                                ]
                                ))
                              ])),
                  Container(
                    height: 100,
                    color: footerColor,
                  )
                  ])
              );
            })
      );
    }
    );
  }
}